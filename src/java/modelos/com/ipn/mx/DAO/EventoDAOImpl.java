/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Thu May 03 02:00:48 CDT 2018
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package modelos.com.ipn.mx.DAO;

import modelos.com.ipn.mx.modelo.Evento;
import modelos.com.ipn.mx.modelo.EventoKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import modelos.com.ipn.mx.interfaces.EventoDAO;

/**
 * This class provides methods to populate DB Table of Evento
 */
public class EventoDAOImpl implements EventoDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Evento ("
        + "idEvento, nombreEvento, fechaEvento, duracionEvento, fotoEvento"
        + ") VALUES (?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idEvento, nombreEvento, fechaEvento, duracionEvento, fotoEvento "
        + "FROM Evento WHERE "
        + "idEvento = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Evento SET "
        + "nombreEvento = ?, fechaEvento = ?, duracionEvento = ?, fotoEvento = ? "
        + "WHERE "
        + "idEvento = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Evento WHERE "
        + "idEvento = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Evento bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdevento());
            ps.setString(2, bean.getNombreevento());
            if (bean.getFechaevento() != null)
                ps.setDate(3, new java.sql.Date(bean.getFechaevento().getTime()));
            else
                ps.setNull(3, Types.DATE);
            ps.setInt(4, bean.getDuracionevento());
            ps.setString(5, bean.getFotoevento());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Evento load(EventoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdevento());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Evento) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Evento bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombreevento());
            if (bean.getFechaevento() != null)
                ps.setDate(2, new java.sql.Date(bean.getFechaevento().getTime()));
            else
                ps.setNull(2, Types.DATE);
            ps.setInt(3, bean.getDuracionevento());
            ps.setString(4, bean.getFotoevento());
            ps.setInt(5, bean.getIdevento());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(EventoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdevento());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Evento> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Evento>();
        while (rs.next()) {
            Evento bean = new Evento();
            bean.setIdevento(rs.getInt("idEvento"));
            bean.setNombreevento(rs.getString("nombreEvento"));
            bean.setFechaevento(rs.getDate("fechaEvento"));
            bean.setDuracionevento(rs.getInt("duracionEvento"));
            bean.setFotoevento(rs.getString("fotoEvento"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}